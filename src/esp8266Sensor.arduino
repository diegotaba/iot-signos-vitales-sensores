#include "MAX30100_PulseOximeter.h"

#include <ESP8266WiFi.h>

#include <Adafruit_MLX90614.h>

#include <PubSubClient.h>

#include <ArduinoJson.h>

#include "time.h"

#include <Wire.h>


const char * ntpServer = "pool.ntp.org";
const long gmtOffset_sec = 0;
const int daylightOffset_sec = 3600;

// Wifi settings
const char * ssid = "Familia Romero";
const char * password = "A3102214362";

//Sensors libs instance
PulseOximeter pox;
Adafruit_MLX90614 mlx = Adafruit_MLX90614();

// Const to start in proggram
float BPM, SpO2, ObjectTempC, AmbientTempC;
const int ID_DEVICE = 19;
uint32_t tLastReport = 0;
uint32_t oLastReport = 0;
uint32_t hrLastReport = 0;
long REPORTING_TEMPERATURE_PERIOD_MS = 1000;
long REPORTING_HEART_RATE_PERIOD_MS = 2000;
long REPORTING_OXIGENATION_PERIOD_MS = 1000;

// Mqtt config 
 const char * mqttServer = "192.168.1.1";
 const int mqttPort = 1883;
WiFiClient espClient;
PubSubClient client(espClient);

int getEpochUTCtime() {

   time_t rawtime;
   struct tm * timeinfo;
   time( & rawtime);
   return rawtime;


}

void callback(char * topic, byte * payload, unsigned int length) {

  String incomingMessage = "";

  Serial.print("Message arrived in topic: ");
  Serial.println(topic);

  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    incomingMessage = incomingMessage + (char) payload[i];
  }

  setMeasuresTimes(incomingMessage);
}

void buildAndSendMessage(String sensor, float value, int sensorTime) {
  StaticJsonDocument < 200 > doc;

  doc["deviceId"] = ID_DEVICE;
  doc["sensor"] = sensor;
  doc["time"] = sensorTime;
  doc["data"] = value;

  char output[100];
  serializeJson(doc, output);
  Serial.println(output);
  client.publish("/sensors/data", output);

}

void setMeasuresTimes(String messsage) {
  DynamicJsonDocument doc(1024);
  deserializeJson(doc, messsage);
  JsonObject obj = doc.as < JsonObject > ();
  int tempTime = obj[String("time")];
  int device = obj[String("deviceId")];
  String sensor = obj[String("sensor")];

  if (device == ID_DEVICE) {
    if (sensor == String("TEMPERATURE")) {
      REPORTING_TEMPERATURE_PERIOD_MS = tempTime;
    }
    if (sensor == String("OXYGENATION")) {
      REPORTING_OXIGENATION_PERIOD_MS = tempTime;
    }
    if (sensor == String("HEART_RATE")) {
      REPORTING_HEART_RATE_PERIOD_MS = tempTime;
    }

  }

  Serial.print("received temperature after serializate ");
  Serial.print(tempTime);

}

void setup() {
  Serial.begin(115200);
  Serial.print("Connecting to ");
   Serial.println(ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print("Unable to connect Wifi \n");
  }
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);

  if (client.connect("ESP8266Client")) {

  Serial.println("mqtt client connected");

  } else {

    Serial.print("failed mqtt client with state ");
    Serial.print(client.state());
    delay(2000);
   }
   client.subscribe("/sensors/config/times");


  mlx.begin();
  if (!pox.begin()) {
    Serial.println("FAILED");
    for (;;);
  } else {
    Serial.println("SUCCESS");
  }

  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  Serial.println("\nWaiting for time");
//  unsigned timeout = 5000;
//  unsigned start = millis();
  while (!time(nullptr)) {
    Serial.print(".");
    delay(1000);
  }
//  delay(1000);
  Serial.println("Time...");

}

void loop() {
  
  pox.update();
  ObjectTempC = mlx.readObjectTempC();

  if (millis() - tLastReport > REPORTING_TEMPERATURE_PERIOD_MS) {
    buildAndSendMessage("TEMPERATURE", ObjectTempC, getEpochUTCtime());
    tLastReport = millis();
  }

  if (millis() - oLastReport > REPORTING_OXIGENATION_PERIOD_MS) {

    buildAndSendMessage("OXYGENATION", pox.getSpO2(), getEpochUTCtime());
    oLastReport = millis();
  }
  if (millis() - hrLastReport > REPORTING_HEART_RATE_PERIOD_MS) {

    buildAndSendMessage("HEART_RATE", pox.getHeartRate(), getEpochUTCtime());
    hrLastReport = millis();
  }
   client.loop();
}
